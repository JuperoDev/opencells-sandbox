"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherMixins = gatherMixins;

var _index = require("../wc-lit-element/index.js");

var _index2 = require("../linting/index.js");

var _index3 = require("../testing/index.js");

var _index4 = require("../demoing-storybook/index.js");

var _index5 = require("../building-rollup/index.js");

var _index6 = require("../wc-lit-element-ts/index.js");

var _index7 = require("../linting-ts/index.js");

var _index8 = require("../testing-ts/index.js");

var _index9 = require("../demoing-storybook-ts/index.js");

var _index10 = require("../building-rollup-ts/index.js");

// ts
function gatherMixins(options) {
  let considerScaffoldFilesFor = false;
  const mixins = [];

  if (options.type === 'scaffold') {
    if (options.typescript === 'true') {
      switch (options.scaffoldType) {
        case 'wc':
          mixins.push(_index6.TsWcLitElementPackageMixin);
          considerScaffoldFilesFor = true;
          break;

        case 'wc-lit-element':
          mixins.push(_index6.TsWcLitElementMixin);
          considerScaffoldFilesFor = true;
          break;
        // no default
      }
    } else {
      switch (options.scaffoldType) {
        case 'wc':
          mixins.push(_index.WcLitElementPackageMixin);
          considerScaffoldFilesFor = true;
          break;

        case 'wc-lit-element':
          mixins.push(_index.WcLitElementMixin);
          considerScaffoldFilesFor = true;
          break;
        // no default
      }
    }
  }

  if (options.features && options.features.length > 0) {
    if (options.typescript === 'true') {
      options.features.forEach(feature => {
        if (feature === 'linting') {
          mixins.push(_index7.TsLintingMixin);
        }

        if (feature === 'testing') {
          mixins.push(_index8.TsTestingMixin);
        }

        if (feature === 'demoing') {
          mixins.push(_index9.TsDemoingStorybookMixin);
        }

        if (feature === 'building') {
          mixins.push(_index10.TsBuildingRollupMixin);
        }
      });
    } else {
      options.features.forEach(feature => {
        if (feature === 'linting') {
          mixins.push(_index2.LintingMixin);
        }

        if (feature === 'testing') {
          mixins.push(_index3.TestingMixin);
        }

        if (feature === 'demoing') {
          mixins.push(_index4.DemoingStorybookMixin);
        }

        if (feature === 'building') {
          mixins.push(_index5.BuildingRollupMixin);
        }
      });
    }
  }

  if (considerScaffoldFilesFor && options._scaffoldFilesFor && options._scaffoldFilesFor.length > 0) {
    options._scaffoldFilesFor.forEach(feature => {
      if (options.typescript === 'true') {
        switch (feature) {
          case 'testing':
            mixins.push(_index8.TsTestingScaffoldMixin);
            break;

          case 'demoing':
            mixins.push(_index9.TsDemoingStorybookScaffoldMixin);
            break;
          // no default
        }
      } else {
        switch (feature) {
          case 'testing':
            mixins.push(_index3.TestingScaffoldMixin);
            break;

          case 'demoing':
            mixins.push(_index4.DemoingStorybookScaffoldMixin);
            break;
          // no default
        }
      }
    });
  }

  return mixins;
}