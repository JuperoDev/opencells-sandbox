"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TsWcLitElementPackageMixin = exports.TsWcLitElementMixin = void 0;

var _path = require("path");

var _index = require("../common-repo/index.js");

var _core = require("../../core.js");

/* eslint-disable max-classes-per-file */
const compose = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));

const safeReduce = (f, initial) => xs => Array.isArray(xs) ? xs.reduce(f, initial) : xs;

const getTemplatePart = compose(_core.processTemplate, _core.readFileFromPath);

function featureReadmeBlurb(feature) {
  const path = (0, _path.join)(__dirname, `./templates/partials/README.${feature}.md`);
  return getTemplatePart(path);
}

function featureReadme(acc, feature, i, a) {
  return `${acc + featureReadmeBlurb(feature)}${i === a.length - 1 ? '' : '\n'}`;
}

const safeFeatureReadme = safeReduce(featureReadme, '');
/* eslint-disable no-console */

const TsWcLitElementMixin = subclass => class extends subclass {
  async execute() {
    this.templateData.featureReadmes = safeFeatureReadme(this.options.features);
    this.templateData.scriptRunCommand = this.options.installDependencies === 'yarn' ? 'yarn' : 'npm run';
    await super.execute();
    const {
      tagName,
      className
    } = this.templateData; // write & rename el class template

    this.copyTemplate(`${__dirname}/templates/MyEl.ts`, this.destinationPath(`src/${className}.ts`)); // write & rename el registration template

    this.copyTemplate(`${__dirname}/templates/my-el.ts`, this.destinationPath(`src/${tagName}.ts`));
    await this.copyTemplates(`${__dirname}/templates/static/**/*`);
  }

};

exports.TsWcLitElementMixin = TsWcLitElementMixin;

const TsWcLitElementPackageMixin = subclass => class extends (0, _index.CommonRepoMixin)(TsWcLitElementMixin(subclass)) {
  async execute() {
    await super.execute(); // write & rename package.json

    this.copyTemplateJsonInto(`${__dirname}/templates/package.json`, this.destinationPath('package.json'));
    this.copyTemplate(`${__dirname}/templates/custom-elements.json`, this.destinationPath('custom-elements.json'));
    this.copyTemplate(`${__dirname}/templates/tsconfig.json`, this.destinationPath('tsconfig.json'));
  }

  async end() {
    await super.end();
    console.log('');
    console.log('You are all set up now!');
    console.log('');
    console.log('All you need to do is run:');
    console.log(`  cd ${this.templateData.tagName}`);
    console.log('  npm run start');
    console.log('');
  }

};

exports.TsWcLitElementPackageMixin = TsWcLitElementPackageMixin;