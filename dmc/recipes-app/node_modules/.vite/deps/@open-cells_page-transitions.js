import {
  page_transitions_css_default
} from "./chunk-AH3M3LOG.js";
import "./chunk-OSIXWIG2.js";
import "./chunk-CMT2GIH3.js";
import {
  __publicField
} from "./chunk-F3FYYIAV.js";

// node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js
var appliedClassMixins = /* @__PURE__ */ new WeakMap();
function wasMixinPreviouslyApplied(mixin, superClass) {
  let klass = superClass;
  while (klass) {
    if (appliedClassMixins.get(klass) === mixin) {
      return true;
    }
    klass = Object.getPrototypeOf(klass);
  }
  return false;
}
function dedupeMixin(mixin) {
  return (superClass) => {
    if (wasMixinPreviouslyApplied(mixin, superClass)) {
      return superClass;
    }
    const mixedClass = mixin(superClass);
    appliedClassMixins.set(mixedClass, mixin);
    return mixedClass;
  };
}

// node_modules/@open-cells/page-transitions/src/default-page-transitions.js
var default_page_transitions_default = {
  static: {
    forwardsIn: "static",
    forwardsOut: "static",
    backwardsIn: "static",
    backwardsOut: "static"
  },
  fade: {
    forwardsIn: "fadeIn",
    forwardsOut: "fadeOut",
    backwardsIn: "fadeIn",
    backwardsOut: "fadeOut"
  },
  horizontal: {
    forwardsIn: "moveFromRight",
    forwardsOut: "moveToLeft",
    backwardsIn: "moveFromLeft",
    backwardsOut: "moveToRight"
  },
  horizontalEverForwards: {
    forwardsIn: "moveFromRight",
    forwardsOut: "moveToLeft",
    backwardsIn: "moveFromRight",
    backwardsOut: "moveToLeft"
  },
  horizontalEverBackwards: {
    forwardsIn: "moveFromLeft",
    forwardsOut: "moveToRight",
    backwardsIn: "moveFromLeft",
    backwardsOut: "moveToRight"
  },
  verticalDownForwards: {
    forwardsIn: "static",
    forwardsOut: "moveToBottom",
    backwardsIn: "moveFromLeft",
    backwardsOut: "moveToRight"
  },
  verticalDownBackwards: {
    forwardsIn: "moveFromRight",
    forwardsOut: "moveToLeft",
    backwardsIn: "static",
    backwardsOut: "moveToBottom"
  },
  verticalUpForwards: {
    forwardsIn: "moveFromBottom",
    forwardsOut: "static",
    backwardsIn: "moveFromLeft",
    backwardsOut: "moveToRight"
  },
  verticalUp: {
    forwardsIn: "moveFromBottom",
    forwardsOut: "static",
    backwardsIn: "static",
    backwardsOut: "moveToBottom"
  }
};

// node_modules/@open-cells/page-transitions/src/page-transitions.js
function findSiblingPageByState(state, currentPage) {
  return (
    // get all sibling nodes
    [...currentPage.parentElement.children].filter((page) => page !== currentPage).find((page) => page.getAttribute("state") === state || page.state === state)
  );
}
function clearAnimations(page) {
  page.removeAttribute("page-animation");
  page.removeAttribute("page-animation-direction");
  page.removeEventListener("animationend", page._animCb);
  page.removeEventListener("animationcancel", page._animCb);
}
function cleanPreviousNavigation(page) {
  var _a;
  const pageOut = (_a = page._isPreviousNavigationFor) == null ? void 0 : _a.page;
  page._isPreviousNavigationFor = null;
  if (pageOut) {
    cleanPreviousNavigation(pageOut);
  }
}
function dispatchActivePageEvent(page) {
  page.dispatchEvent(
    new CustomEvent("page-active", {
      bubbles: true,
      composed: true
    })
  );
}
function resetPage(page, evt, siblingPage) {
  if (evt.eventPhase !== 2) {
    return;
  }
  clearAnimations(page);
  if (!page.hasAttribute("page-animation") && !siblingPage.hasAttribute("page-animation")) {
    requestAnimationFrame(() => {
      const eventPage = page.state === "active" ? page : siblingPage;
      dispatchActivePageEvent(eventPage);
    });
  }
}
function prepareAnimationEnds(pageIn, pageOut) {
  pageIn._animCb = (ev) => resetPage(pageIn, ev, pageOut);
  pageIn.addEventListener("animationend", pageIn._animCb);
  pageIn.addEventListener("animationcancel", pageIn._animCb);
  pageOut._animCb = (ev) => resetPage(pageOut, ev, pageIn);
  pageOut.addEventListener("animationend", pageOut._animCb);
  pageOut.addEventListener("animationcancel", pageOut._animCb);
}
function getAnimationType(page, type, animations) {
  return (animations == null ? void 0 : animations[type]) || default_page_transitions_default["static"];
}
function initAnimation(page, animationAttr, direction, fireEvent) {
  page.setAttribute("page-animation", animationAttr);
  page.setAttribute("page-animation-direction", direction);
  if (fireEvent) {
    page.dispatchEvent(
      new CustomEvent(`animation-${direction}`, {
        bubbles: true,
        composed: true
      })
    );
  }
}
function animatePage(pageIn, pageOut, type, animations) {
  let reverse = false;
  let pageAnimationType = type;
  let pageAnimations = animations;
  if (pageOut && pageIn._isPreviousNavigationFor) {
    pageAnimationType = pageIn._isPreviousNavigationFor.type;
    pageAnimations = pageIn._isPreviousNavigationFor.animations;
    cleanPreviousNavigation(pageIn);
    reverse = true;
  } else {
    pageOut._isPreviousNavigationFor = {
      page: pageIn,
      type,
      animations
    };
  }
  prepareAnimationEnds(pageIn, pageOut);
  const animationType = getAnimationType(pageIn, pageAnimationType, pageAnimations);
  requestAnimationFrame(() => {
    if (!reverse) {
      initAnimation(pageIn, animationType.forwardsIn, "forward");
      initAnimation(pageOut, animationType.forwardsOut, "forward", true);
    } else {
      initAnimation(pageIn, animationType.backwardsIn, "backward");
      initAnimation(pageOut, animationType.backwardsOut, "backward", true);
    }
  });
}
function transitionPage(page, { disabled, type, animations } = {}) {
  clearAnimations(page);
  const inactivePage = findSiblingPageByState("inactive", page);
  if (inactivePage && !disabled) {
    clearAnimations(inactivePage);
    animatePage(page, inactivePage, type, animations);
  } else {
    dispatchActivePageEvent(page);
  }
}

// node_modules/@open-cells/page-transitions/src/PageTransitionsMixin.js
var PageTransitionsMixinImpl = (BaseClass) => {
  var _a;
  return _a = class extends BaseClass {
    get _pageTransitions() {
      return this.constructor.pageTransitionDefinitions;
    }
    constructor() {
      super();
      this.pageTransitionType = "fade";
      this.pageTransitionDisabled = false;
    }
    connectedCallback() {
      super.connectedCallback();
      this.dataset.cellsPage = "";
    }
    /** @internal */
    updated(props) {
      var _a2;
      (_a2 = super.updated) == null ? void 0 : _a2.call(this, props);
      if (props.has("state") && this.state === "active") {
        transitionPage(this, {
          disabled: this.pageTransitionDisabled,
          type: this.pageTransitionType,
          animations: this._pageTransitions
        });
      }
    }
  }, __publicField(_a, "properties", {
    /** Current state of the page: active, inactive, cached */
    state: { reflect: true },
    /** Type of transition to use for this page (fade, static, verticalUp...) */
    pageTransitionType: { attribute: "page-transition-type" },
    /** If true, page won't animate when state is set to active */
    pageTransitionDisabled: {
      type: Boolean,
      attribute: "page-transition-disabled"
    }
  }), __publicField(_a, "pageTransitionDefinitions", { ...default_page_transitions_default }), _a;
};
var PageTransitionsMixin = dedupeMixin(PageTransitionsMixinImpl);
export {
  PageTransitionsMixin,
  default_page_transitions_default as defaultPageTransitions,
  page_transitions_css_default as pageTransitionStyles,
  transitionPage
};
//# sourceMappingURL=@open-cells_page-transitions.js.map
