{
  "version": 3,
  "sources": ["../../@open-wc/dedupe-mixin/src/dedupeMixin.js", "../../@open-cells/page-transitions/src/default-page-transitions.js", "../../@open-cells/page-transitions/src/page-transitions.js", "../../@open-cells/page-transitions/src/PageTransitionsMixin.js"],
  "sourcesContent": ["const appliedClassMixins = new WeakMap();\n\n/** Vefify if the Mixin was previously applyed\n * @private\n * @param {function} mixin      Mixin being applyed\n * @param {object} superClass   Class receiving the new mixin\n * @returns {boolean}\n */\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\n  let klass = superClass;\n  while (klass) {\n    if (appliedClassMixins.get(klass) === mixin) {\n      return true;\n    }\n    klass = Object.getPrototypeOf(klass);\n  }\n  return false;\n}\n\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\n * @export\n * @param {function} mixin      Mixin to be applyed\n * @returns {object}            Mixed class with mixin applied\n */\nexport function dedupeMixin(mixin) {\n  return superClass => {\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\n      return superClass;\n    }\n    const mixedClass = mixin(superClass);\n    appliedClassMixins.set(mixedClass, mixin);\n    return mixedClass;\n  };\n}\n", "export default {\n  static: {\n    forwardsIn: 'static',\n    forwardsOut: 'static',\n    backwardsIn: 'static',\n    backwardsOut: 'static',\n  },\n  fade: {\n    forwardsIn: 'fadeIn',\n    forwardsOut: 'fadeOut',\n    backwardsIn: 'fadeIn',\n    backwardsOut: 'fadeOut',\n  },\n  horizontal: {\n    forwardsIn: 'moveFromRight',\n    forwardsOut: 'moveToLeft',\n    backwardsIn: 'moveFromLeft',\n    backwardsOut: 'moveToRight',\n  },\n  horizontalEverForwards: {\n    forwardsIn: 'moveFromRight',\n    forwardsOut: 'moveToLeft',\n    backwardsIn: 'moveFromRight',\n    backwardsOut: 'moveToLeft',\n  },\n  horizontalEverBackwards: {\n    forwardsIn: 'moveFromLeft',\n    forwardsOut: 'moveToRight',\n    backwardsIn: 'moveFromLeft',\n    backwardsOut: 'moveToRight',\n  },\n  verticalDownForwards: {\n    forwardsIn: 'static',\n    forwardsOut: 'moveToBottom',\n    backwardsIn: 'moveFromLeft',\n    backwardsOut: 'moveToRight',\n  },\n  verticalDownBackwards: {\n    forwardsIn: 'moveFromRight',\n    forwardsOut: 'moveToLeft',\n    backwardsIn: 'static',\n    backwardsOut: 'moveToBottom',\n  },\n  verticalUpForwards: {\n    forwardsIn: 'moveFromBottom',\n    forwardsOut: 'static',\n    backwardsIn: 'moveFromLeft',\n    backwardsOut: 'moveToRight',\n  },\n  verticalUp: {\n    forwardsIn: 'moveFromBottom',\n    forwardsOut: 'static',\n    backwardsIn: 'static',\n    backwardsOut: 'moveToBottom',\n  },\n};\n", "import defaultPageTransitions from './default-page-transitions.js';\n\nfunction findSiblingPageByState(state, currentPage) {\n  return (\n    // get all sibling nodes\n    [...currentPage.parentElement.children]\n      // filter out the current page and not-page siblings\n      .filter(page => page !== currentPage)\n      // find the sibling page with the given state\n      .find(page => page.getAttribute('state') === state || page.state === state)\n  );\n}\n\nfunction clearAnimations(page) {\n  page.removeAttribute('page-animation');\n  page.removeAttribute('page-animation-direction');\n  page.removeEventListener('animationend', page._animCb);\n  page.removeEventListener('animationcancel', page._animCb);\n}\n\nfunction cleanPreviousNavigation(page) {\n  const pageOut = page._isPreviousNavigationFor?.page;\n  page._isPreviousNavigationFor = null;\n  if (pageOut) {\n    cleanPreviousNavigation(pageOut);\n  }\n}\n\nfunction dispatchActivePageEvent(page) {\n  page.dispatchEvent(\n    new CustomEvent('page-active', {\n      bubbles: true,\n      composed: true,\n    }),\n  );\n}\n\nfunction resetPage(page, evt, siblingPage) {\n  /* If this is not the target of the event (for example, it's an animation from an inner node), return */\n  // eventPhase is different to AT_TARGET\n  if (evt.eventPhase !== 2) {\n    return;\n  }\n\n  clearAnimations(page);\n\n  /* If both pages have finished animation, fire event */\n  if (!page.hasAttribute('page-animation') && !siblingPage.hasAttribute('page-animation')) {\n    requestAnimationFrame(() => {\n      const eventPage = page.state === 'active' ? page : siblingPage;\n      dispatchActivePageEvent(eventPage);\n    });\n  }\n}\n\nfunction prepareAnimationEnds(pageIn, pageOut) {\n  pageIn._animCb = ev => resetPage(pageIn, ev, pageOut);\n  pageIn.addEventListener('animationend', pageIn._animCb);\n  pageIn.addEventListener('animationcancel', pageIn._animCb);\n\n  pageOut._animCb = ev => resetPage(pageOut, ev, pageIn);\n  pageOut.addEventListener('animationend', pageOut._animCb);\n  pageOut.addEventListener('animationcancel', pageOut._animCb);\n}\n\nfunction getAnimationType(page, type, animations) {\n  return animations?.[type] || defaultPageTransitions['static'];\n}\n\nfunction initAnimation(page, animationAttr, direction, fireEvent) {\n  page.setAttribute('page-animation', animationAttr);\n  page.setAttribute('page-animation-direction', direction);\n\n  if (fireEvent) {\n    page.dispatchEvent(\n      new CustomEvent(`animation-${direction}`, {\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n}\n\nfunction animatePage(pageIn, pageOut, type, animations) {\n  let reverse = false;\n\n  let pageAnimationType = type;\n  let pageAnimations = animations;\n\n  if (pageOut && pageIn._isPreviousNavigationFor) {\n    pageAnimationType = pageIn._isPreviousNavigationFor.type;\n    pageAnimations = pageIn._isPreviousNavigationFor.animations;\n    cleanPreviousNavigation(pageIn);\n    reverse = true;\n  } else {\n    pageOut._isPreviousNavigationFor = {\n      page: pageIn,\n      type,\n      animations,\n    };\n  }\n\n  prepareAnimationEnds(pageIn, pageOut);\n\n  const animationType = getAnimationType(pageIn, pageAnimationType, pageAnimations);\n\n  requestAnimationFrame(() => {\n    if (!reverse) {\n      initAnimation(pageIn, animationType.forwardsIn, 'forward');\n      initAnimation(pageOut, animationType.forwardsOut, 'forward', true);\n    } else {\n      initAnimation(pageIn, animationType.backwardsIn, 'backward');\n      initAnimation(pageOut, animationType.backwardsOut, 'backward', true);\n    }\n  });\n}\n\n/**\n * Looks for an 'inactive' sibling page of the given one and animates the transition between them\n * using the provided options.\n *\n * The animations object contains a key for each animation type, with the value being an object with\n * the following properties:\n *\n * - ForwardsIn: The name of the animation to use when transitioning the incoming page in the forwards\n *   direction\n * - ForwardsOut: The name of the animation to use when transitioning the outgoing page in the\n *   forwards direction\n * - BackwardsIn: The name of the animation to use when transitioning the incoming page in the\n *   backwards direction\n * - BackwardsOut: The name of the animation to use when transitioning the outgoing page in the\n *   backwards direction\n *\n * @param {HTMLElement} page - The new active page to transition to\n * @param {Object} options - The options to use for the transition\n * @param {boolean} options.disabled - If true, transition is disabled and active page will be\n *   immediately shown\n * @param {string} options.type - The type of transition to use from the animations object\n * @param {Object} options.animations - The object containing the animation definitions\n * @returns {void}\n */\nexport function transitionPage(page, { disabled, type, animations } = {}) {\n  clearAnimations(page);\n\n  // Get sibling page that has been set as 'inactive' (exiting)\n  const inactivePage = findSiblingPageByState('inactive', page);\n\n  if (inactivePage && !disabled) {\n    clearAnimations(inactivePage);\n    animatePage(page, inactivePage, type, animations);\n  } else {\n    dispatchActivePageEvent(page);\n  }\n}\n", "import { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { transitionPage } from './page-transitions.js';\nimport defaultPageTransitions from './default-page-transitions.js';\n\n/**\n * This mixin adds page transition functionality to a page element.\n *\n * When a page `state` is set to `active`, it will invoke `transitionPage` with the options set in\n * the page.\n *\n * This function will look for a sibling page with 'inactive' state, then will add attributes to\n * both pages to allow transitioning between them using CSS animations. These attributes are removed\n * when the pages fire the `animationend` or `animationcancel` events.\n *\n * The attributes added to the pages during transition are:\n *\n * - `page-animation`: the name of the animation for the page\n * - `page-animation-direction`: the direction of the animation (forward or backward)\n *\n * The mixin automatically adds `[data-cells-page]` attribute to the page it is applied to. This is\n * the attribute used to style the pages.\n *\n * ## Styles\n *\n * ### Basic page styles\n *\n * In order to animate them, the pages must have some basic styles. The following is a basic example\n * of how to style the pages:\n *\n * ```css\n * [data-cells-page] {\n *   display: none;\n *   position: absolute;\n *   inset: 0;\n *   z-index: 0;\n * }\n * [data-cells-page][state='active'],\n * [data-cells-page][state='inactive'][page-animation] {\n *   display: block;\n * }\n * [data-cells-page][page-animation] {\n *   animation-name: base-cells-page;\n * }\n * \\@keyframes base-cells-page {\n * }\n * ```\n *\n * With this, every page is absolutely positioned on their relative container; this allows to\n * overlap them. They are also hidden by default. Only the active page, and inactive page that is\n * transitioning, will be shown. Finally, every page that is animating will have a `base-cells-page`\n * animation applied to it. This ensures that the page will always fire an `animationend` event,\n * even if does not have styles for the animation type applied to it.\n *\n * ### Transition styles\n *\n * The styles for the transitions are simple CSS animations. The following is an example for a fade\n * transition:\n *\n * ```css\n * [data-cells-page][state='inactive'] {\n *   z-index: 2;\n * }\n *\n * [data-cells-page][state='active'] {\n *   z-index: 3;\n * }\n *\n * [data-cells-page][page-animation] {\n *   animation-duration: var(--page-transition-animation-duration, 195ms);\n *   animation-timing-function: var(\n *     --page-transition-animation-timing-function,\n *     cubic-bezier(0.4, 0, 0.2, 1)\n *   );\n *   animation-fill-mode: both;\n * }\n *\n * [data-cells-page][page-animation='fadeIn'] {\n *   animation-name: fadeIn;\n * }\n *\n * [data-cells-page][page-animation='fadeOut'] {\n *   animation-name: fadeOut;\n * }\n *\n * \\@keyframes fadeIn {\n *   from {\n *     opacity: 0;\n *   }\n *   to {\n *     opacity: 1;\n *   }\n * }\n *\n * \\@keyframes fadeOut {\n *   from {\n *     opacity: 1;\n *   }\n *   to {\n *     opacity: 0;\n *   }\n * }\n * ```\n *\n * The `z-index` ensures that the active page is shown over the inactive one. Then, the pages being\n * animated receive animation parameters such as duration, timing function and fill mode. Finally,\n * the animations are defined using keyframes.\n *\n * ### Adding styles to pages container document\n *\n * These styles must be applied to the document containing the pages. You can define your own CSS\n * containing them.\n *\n * This package exports a `pageTransitionStyles` Lit CSSResult with the styles for the default\n * animations provided. You can add them to your parent component styles (in case your app and pages\n * are inside the shadow root of a component) or to the global styles of your app.\n *\n * Also, importing the `page-transition-head-styles.js` entrypoint to your app will automatically\n * add them to a `style` tag in the `head` of the main document.\n *\n * ## Animation definitions\n *\n * The `transitionPage` function receives an object with options, including `type` and `animations`.\n * The `animations` object contains the definitions for the animations to use. The keys are the\n * names of the animations. The `type` specifies which key from the `animations` object must be\n * used.\n *\n * An example of animations definitions object:\n *\n * ```js\n * {\n *   \"fade\": {\n *     \"forwardsIn\": \"fadeIn\",\n *     \"forwardsOut\": \"fadeOut\",\n *     \"backwardsIn\": \"fadeIn\",\n *     \"backwardsOut\": \"fadeOut\"\n *   },\n *   \"horizontal\": {\n *     \"forwardsIn\": \"moveFromRight\",\n *     \"forwardsOut\": \"moveToLeft\",\n *     \"backwardsIn\": \"moveFromLeft\",\n *     \"backwardsOut\": \"moveToRight\"\n *   }\n * }\n * ```\n *\n * When the `type` is `fade`, it will use the first set of animations.\n *\n * This package provides a set of default animations matching the default CSS. It is exported as\n * `defaultPageTransitions`.\n *\n * In a component using the mixin, the animation definitions can be overrided using the `static\n * pageTransitionDefinitions` property.\n *\n * ```js\n * static pageTransitionDefinitions = { ...defaultPageTransitions, ...myCustomPageTransitions }\n * ```\n *\n * ### Forwards and backwards transitions\n *\n * This package accounts for \"navigation direction\". When transitioning from one page to another, it\n * is considered that the user is navigating forwards. It will use the `forwardsIn` and\n * `forwardsOut` animations (first for the active page, second for the inactive page).\n *\n * The inactive page will then store a reference to the active page. If the inactive page is set to\n * active again thereafter, this navigation will be considered a backwards navigation. It will then\n * use the `backwardsIn` and `backwardsOut` animations from the new inactive page, and the stored\n * reference will be removed.\n *\n * This allows for different animations when navigating forwards and backwards. If you always want\n * to use the same animations, you can define an animation that uses the same animations for both:\n *\n * ```js\n *   horizontalEverForwards: {\n *     forwardsIn: 'moveFromRight',\n *     forwardsOut: 'moveToLeft',\n *     backwardsIn: 'moveFromRight',\n *     backwardsOut: 'moveToLeft',\n *   },\n * ```\n *\n * The values in each key will be the values for the `page-animation` attribute. The\n * `page-animation-direction` attribute will be set to `forward` or `backward` depending on the\n * direction of the animation.\n *\n * ## Disable animations\n *\n * Setting `disabled` to true in the options object passed to `transitionPage` will disable the\n * animation for the page. The active page will be immediately shown.\n */\nconst PageTransitionsMixinImpl = BaseClass =>\n  class extends BaseClass {\n    static properties = {\n      /** Current state of the page: active, inactive, cached */\n      state: { reflect: true },\n\n      /** Type of transition to use for this page (fade, static, verticalUp...) */\n      pageTransitionType: { attribute: 'page-transition-type' },\n\n      /** If true, page won't animate when state is set to active */\n      pageTransitionDisabled: {\n        type: Boolean,\n        attribute: 'page-transition-disabled',\n      },\n    };\n\n    static pageTransitionDefinitions = { ...defaultPageTransitions };\n\n    get _pageTransitions() {\n      return this.constructor.pageTransitionDefinitions;\n    }\n\n    constructor() {\n      super();\n      this.pageTransitionType = 'fade';\n      this.pageTransitionDisabled = false;\n    }\n\n    connectedCallback() {\n      super.connectedCallback();\n      /** @internal */\n      this.dataset.cellsPage = '';\n    }\n\n    /** @internal */\n    updated(props) {\n      super.updated?.(props);\n      if (props.has('state') && this.state === 'active') {\n        transitionPage(this, {\n          disabled: this.pageTransitionDisabled,\n          type: this.pageTransitionType,\n          animations: this._pageTransitions,\n        });\n      }\n    }\n  };\n\nexport const PageTransitionsMixin = dedupeMixin(PageTransitionsMixinImpl);\n"],
  "mappings": "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",
  "names": ["_a"]
}
